SELECT *
FROM layoffs l 

Data Cleaning

--1. Remove Duplicates
--2. Standardize the data
--3. Null Values or blank values
--4. Remove Any Columns or Rows

--1) Creamos una tabla copia de layoffs

SELECT *
FROM world_layoff.layoffs2

INSERT INTO world_layoff.layoffs2
SELECT *
FROM world_layoff.layoffs

--  Creo la columna row_num para identificar los duplicados

SELECT *,
ROW_NUMBER () OVER (
PARTITION BY company, industry, total_laid_off, percentage_laid_off, 'date',stage,country,funds_raised_millions) AS row_num 
FROM world_layoff.layoffs2

-- Con With filtramos los duplicados

WITH duplicate_cte AS 
(SELECT *,
ROW_NUMBER () OVER (
PARTITION BY company, industry, total_laid_off, percentage_laid_off, 'date',stage,country,funds_raised_millions) AS row_num 
FROM world_layoff.layoffs2 )

SELECT *
FROM duplicate_cte
WHERE row_num > 1

-- Filtramos una compañia para chequear el filtro y nos da que esta tomando algunos campos como duplicados al
-- no tener la particion por el total de columnas.

SELECT *
FROM layoffs l 
WHERE company = 'Oda'

-- Vamos a adicionar una columna en la tabla
--Con crear statement vamos a adicionar la columna row_num a la tabla

USE world_layoff.layoffs2;
CREATE TABLE `layoffs_staging2` (
  `company` text,
  `location` text,
  `industry` text,
  `total_laid_off` int DEFAULT NULL,
  `percentage_laid_off` text,
  `date` text,
  `stage` text,
  `country` text,
  `funds_raised_millions` int DEFAULT NULL,
  `row_num` int 
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

SELECT *
FROM world_layoff.layoffs_staging2;

INSERT INTO world_layoff.layoffs_staging2
SELECT *,
ROW_NUMBER () OVER (
PARTITION BY company, industry, total_laid_off, percentage_laid_off, 'date',stage,country,funds_raised_millions) AS row_num 
FROM world_layoff.layoffs2;

-- Revisamos el resultado
SELECT *
FROM world_layoff.layoffs_staging2
WHERE row_num > 1;

-- Eliminamos los repetidos
DELETE 
FROM world_layoff.layoffs_staging2
WHERE row_num > 1;

--2. Standardize the data

SELECT
company,
TRIM(company)
FROM world_layoff.layoffs_staging2;

-- Revisamos ahora la columna de Industry

SELECT DISTINCT industry
FROM world_layoff.layoffs_staging2
ORDER BY 1;

Aerospace
Construction
Consumer
Crypto
Crypto Currency
CryptoCurrency
Data
Education
Energy
Fin-Tech
Finance
Fitness
Food
Hardware
Healthcare
HR
Infrastructure
Legal
Logistics
Manufacturing
Marketing
Media
Other
Product
Real Estate
Recruiting
Retail
Sales
Security
Support
Transportation
Travel

-- Vemos que hay industrias que son la misma escritas de diferente manera como Crypto, Crypto Currency y CryptoCurrency.
-- Tambien podemos observar unos valores en blanco

SELECT *
FROM world_layoff.layoffs_staging2
WHERE industry = 'Crypto%'

UPDATE world_layoff.layoffs_staging2
SET industry = 'Crypto'
WHERE industry LIKE 'Crypto%';

SELECT DISTINCT industry
FROM world_layoff.layoffs_staging2
ORDER BY 1;

-- Revisamos locaciones

SELECT DISTINCT location
FROM world_layoff.layoffs_staging2
ORDER BY 1;

-- Todo ok, asi que pasamos a country

SELECT DISTINCT country
FROM world_layoff.layoffs_staging2
ORDER BY 1;

Argentina
Australia
Austria
Bahrain
Belgium
Brazil
Bulgaria
Canada
Chile
China
Colombia
Czech Republic
Denmark
Egypt
Estonia
Finland
France
Germany
Ghana
Greece
Hong Kong
Hungary
India
Indonesia
Ireland
Israel
Italy
Japan
Kenya
Lithuania
Luxembourg
Malaysia
Mexico
Myanmar
Netherlands
New Zealand
Nigeria
Norway
Pakistan
Peru
Poland
Portugal
Romania
Russia
Senegal
Seychelles
Singapore
South Africa
South Korea
Spain
Sweden
Switzerland
Thailand
Turkey
United Arab Emirates
United Kingdom
United States
United States.
Uruguay
Vietnam

-- Vemos un error de tipeo con USA

SELECT DISTINCT country, TRIM(TRAILING '.' FROM country)
FROM world_layoff.layoffs_staging2
ORDER BY 1;

UPDATE world_layoff.layoffs_staging2
SET country = TRIM(TRAILING '.' FROM country)
WHERE country LIKE 'United States%';

-- Let's change the format from STR_TO_DATE for the date column

SELECT `date`,
STR_TO_DATE(`date`, '%m/%d/%Y')
FROM world_layoff.layoffs_staging2;

UPDATE world_layoff.layoffs_staging2
SET `date` = STR_TO_DATE(`date`, '%m/%d/%Y');

SELECT `date`
FROM world_layoff.layoffs_staging2

ALTER TABLE world_layoff.layoffs_staging2
MODIFY `date` DATE;

--3. Null Values or blank values
-- Volvemos a revisar los nulos o casillas en blanco, esta vez de las industrias

SELECT *
FROM world_layoff.layoffs_staging2
WHERE `total_laid_off` IS NULL
AND percentage_laid_off IS NULL;

SELECT *
FROM world_layoff.layoffs_staging2
WHERE industry IS NULL
OR industry = ' ';

SELECT *
FROM world_layoff.layoffs_staging2
WHERE company = 'Airbnb';

-- Vamos a popular las industrias faltantes que podamos con las casillas que si cuenten con esa informacion.

SELECT T1.industry, T2.industry
FROM world_layoff.layoffs_staging2 T1
JOIN world_layoff.layoffs_staging2 T2
	ON T1.company = T2.company
WHERE (T1.industry IS NULL OR T1.industry = '')
AND T2.industry IS NOT NULL;

	
	Travel
	
	Transportation
	Transportation
	
	Consumer

-- El resultado nos arroja los nulos o en blanco en relacion a los completos
-- Actualizamos la tabla

UPDATE world_layoff.layoffs_staging2 T1
JOIN world_layoff.layoffs_staging2 T2
	ON T1.company = T2.company
SET T1.industry = T2.industry
WHERE (T1.industry IS NULL OR T1.industry = '')
AND T2.industry IS NOT NULL;

--Al parecer el problema de que no toma la correccion es por los valores en blanco asi que vamos a eliminarlos

UPDATE world_layoff.layoffs_staging2
SET industry = NULL
WHERE industry = '';

--Limpiada esta parte reformulamos la correccion.

UPDATE world_layoff.layoffs_staging2 T1
JOIN world_layoff.layoffs_staging2 T2
	ON T1.company = T2.company
SET T1.industry = T2.industry
WHERE T1.industry IS NULL
AND T2.industry IS NOT NULL;

-- Chequeamos la info una vez mas con uno o varios ejemplos.

SELECT *
FROM world_layoff.layoffs_staging2
WHERE company = 'Airbnb';

--YA NO APARECEN!!

--4. Remove Any Columns or Rows
-- Vamos al ultimo paso de borrar informacion que puede no ser util o confiable en los casos en donde no tengamos manera de 
--completar esa informacion

SELECT *
FROM world_layoff.layoffs_staging2
WHERE total_laid_off IS NULL
AND percentage_laid_off IS NULL;

DELETE 
FROM world_layoff.layoffs_staging2
WHERE total_laid_off IS NULL
AND percentage_laid_off IS NULL


-- Vamos a eliminar la columna row_num que agregamos al principio del ejercicio

ALTER TABLE world_layoff.layoffs_staging2
DROP COLUMN row_num

SELECT *
FROM world_layoff.layoffs_staging2;

-- Chequeamos y ya no figura.
/* Muchas gracias por acompañarme en todo este proceso!! */















